"ghassanpl::color_cast" = #8
"ghassanpl::to_hsv" = #10
"ghassanpl::constexpr_math" = #4
"ghassanpl::gamma_correct" = #6
"bytelike_range" = #2
"203.252033" = #54
"4" = #53
"202.429150" = #52
"3" = #51
"200.000000" = #45
"is true for common type class std::span<unsigned char,-1>" = #26
"200.803213" = #48
"is false for pointer types" = #34
"201.612903" = #50
"LoopValue" = #44
"ghassanpl::string_ops::ascii" = #12
"ReturnTheSameValueFor_abs" = #41
"is true for common type class std::span<unsigned char const ,-1>" = #30
"ShouldForValuesInRange(0, 505)" = #42
"ForValue" = #46
"1" = #47
"FalseForConstChar" = #36
"2" = #49
"is true for common type class std::basic_string_view<char,struct std::char_traits<char> >" = #22
"is true for common type class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >" = #15
"TrueForConstVersionOfThisType" = #20
"TrueForThisType" = #17
"'s functions return the same value in constexpr as in non-constexpr" = #39
"ConvertTransparent" = #1334
"0" = #43
"ShouldBe" = #18
"20" = #85
"7" = #59
"24" = #93
"9" = #63
"28" = #101
"11" = #67
"225.225225" = #102
"213.675214" = #78
"18" = #81
"6" = #57
"21" = #87
"8" = #61
"12" = #69
"10" = #65
"207.468880" = #64
"217.391304" = #86
"22" = #89
"215.517241" = #82
"205.761317" = #60
"23" = #91
"29" = #103
"226.244344" = #104
"211.864407" = #74
"14" = #73
"220.264317" = #92
"204.081633" = #56
"221.238938" = #94
"210.970464" = #72
"216.450216" = #84
"222.222222" = #96
"212.765957" = #76
"224.215247" = #100
"206.611570" = #62
"208.333333" = #66
"209.205021" = #68
"17" = #79
"19" = #83
"218.340611" = #88
"210.084034" = #70
"16" = #77
"25" = #95
"27" = #99
"5" = #55
"13" = #71
"15" = #75
"214.592275" = #80
"219.298246" = #90
"223.214286" = #98
"26" = #97
"204.918033" = #58
"276.243094" = #184
"70" = #185
"261.780105" = #164
"74" = #193
"277.777778" = #186
"268.817204" = #174
"284.090909" = #194
"76" = #197
"77" = #199
"75" = #195
"78" = #201
"60" = #165
"247.524752" = #142
"61" = #167
"287.356322" = #198
"290.697674" = #202
"79" = #203
"292.397661" = #204
"260.416667" = #162
"270.270270" = #176
"80" = #205
"271.739130" = #178
"280.898876" = #190
"289.017341" = #200
"253.807107" = #152
"67" = #179
"252.525253" = #150
"257.731959" = #158
"259.067358" = #160
"250.000000" = #146
"255.102041" = #154
"248.756219" = #144
"58" = #161
"263.157895" = #166
"267.379679" = #172
"63" = #171
"66" = #177
"68" = #181
"52" = #149
"282.485876" = #192
"54" = #153
"279.329609" = #188
"274.725275" = #182
"56" = #157
"264.550265" = #168
"72" = #189
"73" = #191
"285.714286" = #196
"59" = #163
"65" = #175
"256.410256" = #156
"251.256281" = #148
"57" = #159
"273.224044" = #180
"71" = #187
"51" = #147
"49" = #143
"55" = #155
"50" = #145
"62" = #169
"64" = #173
"265.957447" = #170
"53" = #151
"69" = #183
"240.384615" = #130
"40" = #125
"36" = #117
"43" = #131
"31" = #107
"229.357798" = #110
"241.545894" = #132
"239.234450" = #128
"233.644860" = #118
"242.718447" = #134
"243.902439" = #136
"46" = #137
"238.095238" = #126
"234.741784" = #120
"47" = #139
"45" = #135
"32" = #109
"33" = #111
"235.849057" = #122
"39" = #123
"245.098039" = #138
"236.966825" = #124
"44" = #133
"231.481481" = #114
"246.305419" = #140
"48" = #141
"35" = #115
"228.310502" = #108
"30" = #105
"34" = #113
"227.272727" = #106
"38" = #121
"41" = #127
"230.414747" = #112
"42" = #129
"232.558140" = #116
"37" = #119
"318.471338" = #232
"82" = #209
"306.748466" = #220
"99" = #243
"98" = #241
"333.333333" = #246
"347.222222" = #258
"297.619048" = #210
"108" = #261
"110" = #265
"357.142857" = #266
"312.500000" = #226
"91" = #227
"308.641975" = #222
"85" = #215
"95" = #235
"324.675325" = #238
"331.125828" = #244
"344.827586" = #256
"109" = #263
"111" = #267
"295.857988" = #208
"359.712230" = #268
"112" = #269
"328.947368" = #242
"83" = #211
"92" = #229
"316.455696" = #230
"88" = #221
"93" = #231
"94" = #233
"320.512821" = #234
"322.580645" = #236
"294.117647" = #206
"335.570470" = #248
"337.837838" = #250
"103" = #251
"104" = #253
"81" = #207
"303.030303" = #216
"87" = #219
"105" = #255
"106" = #257
"97" = #239
"342.465753" = #254
"299.401198" = #212
"86" = #217
"310.559006" = #224
"314.465409" = #228
"84" = #213
"326.797386" = #240
"100" = #245
"90" = #225
"340.136054" = #252
"101" = #247
"89" = #223
"96" = #237
"102" = #249
"349.650350" = #260
"107" = #259
"352.112676" = #262
"354.609929" = #264
"304.878049" = #218
"301.204819" = #214
"409.836066" = #302
"396.825397" = #294
"129" = #303
"130" = #305
"416.666667" = #306
"115" = #275
"116" = #277
"125" = #295
"117" = #279
"126" = #297
"114" = #273
"393.700787" = #292
"413.223140" = #304
"367.647059" = #274
"378.787879" = #282
"113" = #271
"364.963504" = #272
"375.939850" = #280
"381.679389" = #284
"387.596899" = #288
"390.625000" = #290
"123" = #291
"400.000000" = #296
"119" = #283
"121" = #287
"370.370370" = #276
"403.225806" = #298
"128" = #301
"362.318841" = #270
"384.615385" = #286
"122" = #289
"373.134328" = #278
"120" = #285
"124" = #293
"127" = #299
"118" = #281
"406.504065" = #300
"495.049505" = #344
"147" = #339
"133" = #311
"134" = #313
"142" = #329
"510.204082" = #350
"531.914894" = #358
"454.545455" = #326
"485.436893" = #340
"139" = #323
"543.478261" = #362
"526.315789" = #356
"131" = #307
"434.782609" = #316
"462.962963" = #330
"150" = #345
"458.715596" = #328
"515.463918" = #352
"156" = #357
"160" = #365
"161" = #367
"420.168067" = #308
"431.034483" = #314
"138" = #321
"144" = #333
"480.769231" = #338
"148" = #341
"157" = #359
"153" = #351
"537.634409" = #360
"471.698113" = #334
"467.289720" = #332
"158" = #361
"476.190476" = #336
"159" = #363
"132" = #309
"549.450549" = #364
"442.477876" = #320
"146" = #337
"500.000000" = #346
"152" = #349
"555.555556" = #366
"561.797753" = #368
"162" = #369
"568.181818" = #370
"136" = #317
"490.196078" = #342
"135" = #315
"151" = #347
"446.428571" = #322
"149" = #343
"137" = #319
"450.450450" = #324
"520.833333" = #354
"155" = #355
"438.596491" = #318
"143" = #331
"154" = #353
"140" = #325
"423.728814" = #310
"141" = #327
"145" = #335
"505.050505" = #348
"427.350427" = #312
"173" = #391
"574.712644" = #372
"588.235294" = #376
"632.911392" = #388
"178" = #401
"177" = #399
"163" = #371
"694.444444" = #402
"179" = #403
"581.395349" = #374
"625.000000" = #386
"180" = #405
"174" = #393
"176" = #397
"714.285714" = #406
"181" = #407
"171" = #387
"704.225352" = #404
"595.238095" = #378
"602.409639" = #380
"168" = #381
"169" = #383
"170" = #385
"657.894737" = #394
"617.283951" = #384
"641.025641" = #390
"165" = #375
"649.350649" = #392
"175" = #395
"164" = #373
"609.756098" = #382
"166" = #377
"167" = #379
"675.675676" = #398
"172" = #389
"684.931507" = #400
"666.666667" = #396
"2173.913043" = #500
"221" = #487
"1282.051282" = #468
"1351.351351" = #472
"229" = #503
"230" = #505
"1612.903226" = #484
"2500.000000" = #506
"231" = #507
"224" = #493
"2631.578947" = #508
"226" = #497
"211" = #467
"227" = #499
"228" = #501
"204" = #453
"1136.363636" = #458
"200" = #445
"1315.789474" = #470
"1562.500000" = #482
"1219.512195" = #464
"205" = #455
"1111.111111" = #456
"222" = #489
"2000.000000" = #496
"208" = #461
"202" = #449
"2272.727273" = #502
"219" = #483
"1785.714286" = #490
"2380.952381" = #504
"1162.790698" = #460
"1388.888889" = #474
"1000.000000" = #446
"1020.408163" = #448
"203" = #451
"1190.476190" = #462
"1250.000000" = #466
"1428.571429" = #476
"216" = #477
"1041.666667" = #450
"217" = #479
"201" = #447
"1515.151515" = #480
"218" = #481
"213" = #471
"1666.666667" = #486
"1724.137931" = #488
"209" = #463
"223" = #491
"1851.851852" = #492
"206" = #457
"207" = #459
"1086.956522" = #454
"1063.829787" = #452
"210" = #465
"212" = #469
"214" = #473
"215" = #475
"1470.588235" = #478
"220" = #485
"225" = #495
"1923.076923" = #494
"2083.333333" = #498
"943.396226" = #440
"182" = #409
"190" = #425
"194" = #433
"806.451613" = #422
"187" = #419
"909.090909" = #436
"746.268657" = #412
"833.333333" = #426
"819.672131" = #424
"195" = #435
"198" = #441
"735.294118" = #410
"186" = #417
"192" = #429
"877.192982" = #432
"193" = #431
"847.457627" = #428
"196" = #437
"961.538462" = #442
"197" = #439
"769.230769" = #416
"199" = #443
"980.392157" = #444
"724.637681" = #408
"925.925926" = #438
"184" = #413
"183" = #411
"781.250000" = #418
"185" = #415
"793.650794" = #420
"892.857143" = #434
"757.575758" = #414
"188" = #421
"189" = #423
"191" = #427
"862.068966" = #430
"-649.350649" = #700
"-833.333333" = #666
"-641.025641" = #702
"306" = #657
"308" = #661
"-819.672131" = #668
"-625.000000" = #706
"-793.650794" = #672
"-847.457627" = #664
"-704.225352" = #688
"319" = #683
"-714.285714" = #686
"-684.931507" = #692
"-675.675676" = #694
"-666.666667" = #696
"331" = #707
"-781.250000" = #674
"-806.451613" = #670
"323" = #691
"312" = #669
"-617.283951" = #708
"332" = #709
"-609.756098" = #710
"333" = #711
"-862.068966" = #662
"327" = #699
"326" = #697
"329" = #703
"-632.911392" = #704
"317" = #679
"-909.090909" = #656
"-757.575758" = #678
"302" = #649
"303" = #651
"-943.396226" = #652
"-925.925926" = #654
"316" = #677
"328" = #701
"330" = #705
"318" = #681
"321" = #687
"311" = #667
"313" = #671
"305" = #655
"307" = #659
"314" = #673
"-724.637681" = #684
"-694.444444" = #690
"324" = #693
"-892.857143" = #658
"-877.192982" = #660
"309" = #663
"304" = #653
"310" = #665
"-980.392157" = #648
"315" = #675
"-961.538462" = #650
"-769.230769" = #676
"-746.268657" = #680
"-735.294118" = #682
"320" = #685
"325" = #695
"322" = #689
"-657.894737" = #698
"-7142.857143" = #560
"258" = #561
"259" = #563
"-5555.555556" = #564
"-5000.000000" = #566
"-4545.454545" = #568
"262" = #569
"236" = #517
"3846.153846" = #520
"241" = #527
"10000.000000" = #536
"247" = #539
"248" = #541
"250" = #545
"251" = #547
"2941.176471" = #512
"50000.000000" = #544
"252" = #549
"-6250.000000" = #562
"260" = #565
"261" = #567
"-4166.666667" = #570
"263" = #571
"-3846.153846" = #572
"2777.777778" = #510
"-16666.666667" = #552
"-25000.000000" = #550
"-10000.000000" = #556
"237" = #519
"5555.555556" = #528
"238" = #521
"243" = #531
"7142.857143" = #532
"-12500.000000" = #554
"256" = #557
"6250.000000" = #530
"3125.000000" = #514
"234" = #513
"-8333.333333" = #558
"8333.333333" = #534
"16666.666667" = #540
"4545.454545" = #524
"254" = #553
"0.000000" = #546
"257" = #559
"240" = #525
"233" = #511
"3571.428571" = #518
"235" = #515
"239" = #523
"246" = #537
"245" = #535
"249" = #543
"3333.333333" = #516
"242" = #529
"-50000.000000" = #548
"255" = #555
"244" = #533
"4166.666667" = #522
"232" = #509
"12500.000000" = #538
"5000.000000" = #526
"25000.000000" = #542
"253" = #551
"-1136.363636" = #634
"-1562.500000" = #610
"-1851.851852" = #600
"-2631.578947" = #584
"-1724.137931" = #604
"-3571.428571" = #574
"281" = #607
"276" = #597
"283" = #611
"-2083.333333" = #594
"295" = #635
"-1111.111111" = #636
"-3125.000000" = #578
"271" = #587
"278" = #601
"-1428.571429" = #616
"277" = #599
"-3333.333333" = #576
"-1351.351351" = #620
"-1219.512195" = #628
"294" = #633
"267" = #579
"270" = #585
"-2173.913043" = #592
"280" = #605
"-1666.666667" = #606
"282" = #609
"-1515.151515" = #612
"-1388.888889" = #618
"266" = #577
"287" = #619
"279" = #603
"-1282.051282" = #624
"-2941.176471" = #580
"288" = #621
"289" = #623
"-1250.000000" = #626
"268" = #581
"273" = #591
"-1612.903226" = #608
"286" = #617
"290" = #625
"-1315.789474" = #622
"269" = #583
"-1190.476190" = #630
"-2380.952381" = #588
"284" = #613
"-2500.000000" = #586
"265" = #575
"274" = #593
"-1470.588235" = #614
"-2272.727273" = #590
"275" = #595
"292" = #629
"-2777.777778" = #582
"272" = #589
"-1785.714286" = #602
"291" = #627
"-2000.000000" = #596
"264" = #573
"-1923.076923" = #598
"293" = #631
"-1162.790698" = #632
"285" = #615
"299" = #643
"-1000.000000" = #646
"-1041.666667" = #642
"297" = #639
"300" = #645
"296" = #637
"298" = #641
"301" = #647
"-1086.956522" = #638
"-1063.829787" = #640
"-1020.408163" = #644
"-537.634409" = #732
"-476.190476" = #756
"-500.000000" = #746
"-490.196078" = #750
"341" = #727
"344" = #733
"354" = #753
"335" = #715
"356" = #757
"-568.181818" = #722
"340" = #725
"-510.204082" = #742
"351" = #747
"358" = #761
"359" = #763
"361" = #767
"362" = #769
"-446.428571" = #770
"-462.962963" = #762
"363" = #771
"-442.477876" = #772
"346" = #737
"-602.409639" = #712
"-485.436893" = #752
"353" = #751
"347" = #739
"-505.050505" = #744
"355" = #755
"-595.238095" = #714
"339" = #723
"-588.235294" = #716
"-549.450549" = #728
"352" = #749
"-471.698113" = #758
"360" = #765
"-450.450450" = #768
"364" = #773
"-438.596491" = #774
"-480.769231" = #754
"-454.545455" = #766
"365" = #775
"337" = #719
"-555.555556" = #726
"345" = #735
"-526.315789" = #736
"-574.712644" = #720
"-520.833333" = #738
"349" = #743
"-531.914894" = #734
"-581.395349" = #718
"350" = #745
"357" = #759
"-515.463918" = #740
"342" = #729
"348" = #741
"-467.289720" = #760
"-495.049505" = #748
"-458.715596" = #764
"336" = #717
"-561.797753" = #724
"334" = #713
"338" = #721
"-543.478261" = #730
"343" = #731
"386" = #817
"375" = #795
"-364.963504" = #820
"-357.142857" = #826
"389" = #823
"391" = #827
"381" = #807
"383" = #811
"-420.168067" = #784
"370" = #785
"373" = #791
"374" = #793
"-367.647059" = #818
"388" = #821
"-354.609929" = #828
"379" = #803
"392" = #829
"-342.465753" = #838
"372" = #789
"377" = #799
"397" = #839
"394" = #833
"-381.679389" = #808
"-409.836066" = #790
"-423.728814" = #782
"-434.782609" = #776
"366" = #777
"-427.350427" = #780
"368" = #781
"-431.034483" = #778
"371" = #787
"-413.223140" = #788
"378" = #801
"-378.787879" = #810
"-375.939850" = #812
"387" = #819
"380" = #805
"-387.596899" = #804
"-384.615385" = #806
"-359.712230" = #824
"395" = #835
"385" = #815
"-362.318841" = #822
"393" = #831
"369" = #783
"-406.504065" = #792
"-390.625000" = #802
"-370.370370" = #816
"-352.112676" = #830
"-373.134328" = #814
"-416.666667" = #786
"-396.825397" = #798
"-349.650350" = #832
"390" = #825
"-403.225806" = #794
"-347.222222" = #834
"-344.827586" = #836
"396" = #837
"384" = #813
"-393.700787" = #800
"-400.000000" = #796
"382" = #809
"367" = #779
"376" = #797
"427" = #899
"422" = #889
"-282.485876" = #900
"-324.675325" = #854
"-299.401198" = #880
"-295.857988" = #884
"403" = #851
"413" = #871
"421" = #887
"-333.333333" = #846
"423" = #891
"425" = #895
"-340.136054" = #840
"428" = #901
"-280.898876" = #902
"429" = #903
"401" = #847
"409" = #863
"404" = #853
"-289.017341" = #892
"-308.641975" = #870
"405" = #855
"-328.947368" = #850
"399" = #843
"408" = #861
"-316.455696" = #862
"411" = #867
"-306.748466" = #872
"398" = #841
"402" = #849
"414" = #873
"-304.878049" = #874
"-303.030303" = #876
"-314.465409" = #864
"-312.500000" = #866
"406" = #857
"412" = #869
"-320.512821" = #858
"400" = #845
"407" = #859
"-310.559006" = #868
"416" = #877
"410" = #865
"-322.580645" = #856
"-301.204819" = #878
"-326.797386" = #852
"-318.471338" = #860
"417" = #879
"-297.619048" = #882
"418" = #881
"419" = #883
"420" = #885
"-294.117647" = #886
"-292.397661" = #888
"-290.697674" = #890
"424" = #893
"-335.570470" = #844
"-287.356322" = #894
"-337.837838" = #842
"-331.125828" = #848
"-285.714286" = #896
"426" = #897
"415" = #875
"-284.090909" = #898
"-273.224044" = #912
"-277.777778" = #906
"432" = #909
"433" = #911
"434" = #913
"-271.739130" = #914
"-279.329609" = #904
"431" = #907
"430" = #905
"-276.243094" = #908
"-274.725275" = #910
"463" = #971
"461" = #967
"-248.756219" = #948
"-270.270270" = #916
"-246.305419" = #952
"464" = #973
"-239.234450" = #964
"-232.558140" = #976
"-233.644860" = #974
"-234.741784" = #972
"465" = #975
"466" = #977
"-259.067358" = #932
"451" = #947
"-231.481481" = #978
"462" = #969
"-255.102041" = #938
"440" = #925
"-247.524752" = #950
"-240.384615" = #962
"-251.256281" = #944
"436" = #917
"-256.410256" = #936
"439" = #923
"-264.550265" = #924
"444" = #933
"435" = #915
"442" = #929
"448" = #941
"459" = #963
"-235.849057" = #970
"-253.807107" = #940
"445" = #935
"-263.157895" = #926
"-261.780105" = #928
"437" = #919
"443" = #931
"-267.379679" = #920
"438" = #921
"-257.731959" = #934
"-260.416667" = #930
"-252.525253" = #942
"441" = #927
"-268.817204" = #918
"-250.000000" = #946
"-265.957447" = #922
"453" = #951
"-245.098039" = #954
"449" = #943
"-243.902439" = #956
"456" = #957
"446" = #937
"447" = #939
"452" = #949
"450" = #945
"454" = #953
"455" = #955
"-242.718447" = #958
"457" = #959
"-241.545894" = #960
"458" = #961
"460" = #965
"-238.095238" = #966
"-236.966825" = #968
"-204.918033" = #1034
"470" = #985
"-205.761317" = #1032
"-212.765957" = #1016
"-204.081633" = #1036
"-221.238938" = #998
"-217.391304" = #1006
"498" = #1041
"469" = #983
"468" = #981
"-208.333333" = #1026
"-201.612903" = #1042
"-215.517241" = #1010
"487" = #1019
"494" = #1033
"474" = #993
"492" = #1029
"-216.450216" = #1008
"467" = #979
"472" = #989
"-202.429150" = #1040
"483" = #1011
"477" = #999
"-230.414747" = #980
"473" = #991
"486" = #1017
"-209.205021" = #1024
"-207.468880" = #1028
"-206.611570" = #1030
"482" = #1009
"496" = #1037
"495" = #1035
"-203.252033" = #1038
"-214.592275" = #1012
"-222.222222" = #996
"479" = #1003
"475" = #995
"-223.214286" = #994
"-218.340611" = #1004
"476" = #997
"484" = #1013
"489" = #1023
"497" = #1039
"485" = #1015
"-229.357798" = #982
"-220.264317" = #1000
"-224.215247" = #992
"-211.864407" = #1018
"481" = #1007
"-210.970464" = #1020
"490" = #1025
"-226.244344" = #988
"-210.084034" = #1022
"491" = #1027
"-228.310502" = #984
"-213.675214" = #1014
"478" = #1001
"488" = #1021
"493" = #1031
"-225.225225" = #990
"-227.272727" = #986
"-219.298246" = #1002
"480" = #1005
"471" = #987
"ConvertBlue" = #1332
"501" = #1046
"ForValueB" = #1068
"41649.312786" = #1073
"42688.340960" = #1076
"43766.740778" = #1079
"53583.676269" = #1102
"54083.288264" = #1103
"-200.803213" = #1044
"40977.560688" = #1071
"42337.719521" = #1075
"54589.920517" = #1104
"ConvertBlack" = #1325
"ForValueA" = #1066
"50272.476824" = #1095
"55103.705173" = #1105
"41311.388724" = #1072
"47258.979206" = #1088
"503" = #1050
"53090.955425" = #1101
"55624.777501" = #1106
"converts colors between linear and u32 appropriately" = #1323
"44135.301179" = #1080
"46447.681332" = #1086
"504" = #1052
"46850.696201" = #1087
"43402.777778" = #1078
"48946.667711" = #1092
"ReturnTheSameValueFor_trunc" = #1059
"41991.400161" = #1074
"50726.402078" = #1096
"52125.685453" = #1099
"51652.892562" = #1098
"47672.622566" = #1089
"48516.369423" = #1091
"44886.526860" = #1082
"49824.617347" = #1094
"Should" = #1326
"40647.762747" = #1070
"43043.336031" = #1077
"45269.352648" = #1083
"45657.096939" = #1084
"48091.720529" = #1090
"ReturnTheSameValueFor_sqrt" = #1063
"499" = #1043
"44508.536737" = #1081
"nan" = #1053
"46049.844352" = #1085
"ReturnTheSameValueFor_floor" = #1055
"ConvertRed" = #1328
"40000.000000" = #1067
"inf" = #1049
"49382.716049" = #1093
"51186.503143" = #1097
"500" = #1045
"52604.999579" = #1100
"ReturnTheSameValueFor_fmod" = #1065
"40321.930291" = #1069
"ReturnTheSameValueFor_ceil" = #1057
"-inf" = #1051
"-0.000000" = #1047
"ConvertGreen" = #1330
"ReturnTheSameValueFor_signbit" = #1061
"502" = #1048
"58344.418773" = #1111
"60666.359290" = #1115
"57784.763314" = #1110
"56153.275982" = #1107
"59488.399762" = #1113
"57233.121952" = #1109
"61268.503088" = #1116
"61879.656444" = #1117
"60073.048827" = #1114
"56689.342404" = #1108
"58912.244321" = #1112
"2777777.777778" = #1288
"1000000.000000" = #1268
"826446.280992" = #1263
"2441406.250000" = #1286
"25000000.000000" = #1308
"51020408.163265" = #1311
"4725897.920605" = #1295
"9765625.000000" = #1302
"1352082.206598" = #1275
"1234567.901235" = #1273
"1417233.560091" = #1276
"1929012.345679" = #1282
"718184.429762" = #1259
"889996.440014" = #1265
"2162629.757785" = #1284
"1085069.444444" = #1270
"30864197.530864" = #1309
"69444444.444444" = #1312
"694444.444444" = #1258
"1731301.939058" = #1280
"3188775.510204" = #1290
"277777777.777778" = #1315
"625000000.000000" = #1316
"1826150.474799" = #1281
"3698224.852071" = #1292
"ReturnTheSameValueFor_pow" = #1319
"1643655.489809" = #1279
"1562500.000000" = #1278
"769467.528470" = #1261
"857338.820302" = #1264
"1131733.816206" = #1271
"8650519.031142" = #1301
"11111111.111111" = #1303
"39062500.000000" = #1310
"156250000.000000" = #1314
"1181474.480151" = #1272
"5165289.256198" = #1296
"797193.877551" = #1262
"7716049.382716" = #1300
"1041232.819658" = #1269
"961168.781238" = #1267
"17361111.111111" = #1306
"743162.901308" = #1260
"1291322.314050" = #1274
"2040816.326531" = #1283
"20661157.024793" = #1307
"6250000.000000" = #1298
"14792899.408284" = #1305
"1487209.994051" = #1277
"2972651.605232" = #1289
"5668934.240363" = #1297
"100000000.000000" = #1313
"2295684.113866" = #1285
"924556.213018" = #1266
"4000000.000000" = #1293
"2500000000.000000" = #1317
"12755102.040816" = #1304
"3429355.281207" = #1291
"2601456.815817" = #1287
"4340277.777778" = #1294
"6925207.756233" = #1299
"671862.402580" = #1257
"112607.540201" = #1169
"114134.404675" = #1170
"97656.250000" = #1158
"115692.535518" = #1171
"122255.367011" = #1175
"123983.336640" = #1176
"105414.066453" = #1164
"63769.003163" = #1120
"120563.271605" = #1174
"75473.976573" = #1136
"71491.892819" = #1131
"73842.155009" = #1134
"80707.644628" = #1142
"96446.896339" = #1157
"125748.201801" = #1177
"127551.020408" = #1178
"65077.051229" = #1122
"86505.190311" = #1148
"100144.207659" = #1160
"117282.792269" = #1172
"92950.624628" = #1154
"129392.888567" = #1179
"84505.137912" = #1146
"131274.942239" = #1180
"81632.653061" = #1143
"89641.077127" = #1151
"78025.030430" = #1139
"133198.358996" = #1181
"118906.064209" = #1173
"68528.823223" = #1127
"67816.840278" = #1126
"88577.097506" = #1150
"83531.023422" = #1145
"79798.269974" = #1141
"82573.655701" = #1144
"67115.895729" = #1125
"90724.343156" = #1152
"95259.868922" = #1156
"108206.371191" = #1166
"69986.842474" = #1129
"74651.378064" = #1135
"64418.047360" = #1121
"62500.000000" = #1118
"63129.718946" = #1119
"78904.178765" = #1140
"101423.992860" = #1161
"72262.689328" = #1132
"77160.493827" = #1138
"91827.364555" = #1153
"65746.219592" = #1123
"102728.468113" = #1162
"70733.363513" = #1130
"85496.392052" = #1147
"87531.949161" = #1149
"66425.762568" = #1124
"94094.621551" = #1155
"98888.493335" = #1159
"69252.077562" = #1128
"73046.018992" = #1133
"104058.272633" = #1163
"106796.531249" = #1165
"109644.313846" = #1167
"76310.246940" = #1137
"111111.111111" = #1168
"245074.012352" = #1217
"165245.554895" = #1195
"260308.204915" = #1220
"295368.620038" = #1226
"301895.906292" = #1227
"308641.975309" = #1228
"192366.882118" = #1204
"218359.682068" = #1211
"139229.226999" = #1184
"135164.359862" = #1182
"141330.770535" = #1185
"155000.310001" = #1191
"160000.000000" = #1193
"250000.000000" = #1218
"265703.050271" = #1221
"282933.454052" = #1224
"315616.715061" = #1229
"371802.498513" = #1236
"150231.356289" = #1189
"176541.204717" = #1199
"381039.475690" = #1237
"346020.761246" = #1233
"400576.830636" = #1239
"152587.890625" = #1190
"182628.387757" = #1201
"362897.372623" = #1235
"147928.994083" = #1188
"145679.156226" = #1187
"214334.705075" = #1210
"255076.012652" = #1219
"222499.110004" = #1212
"289050.757313" = #1225
"390625.000000" = #1238
"410913.872452" = #1240
"421656.265812" = #1241
"432825.484765" = #1242
"195786.670843" = #1205
"444444.444444" = #1243
"456537.618700" = #1244
"210419.998317" = #1209
"469131.169075" = #1245
"235648.977283" = #1215
"277008.310249" = #1223
"330294.622804" = #1231
"137174.211248" = #1183
"157470.395566" = #1192
"240292.195309" = #1216
"338020.551650" = #1232
"202905.608311" = #1207
"231139.053254" = #1214
"143480.257117" = #1186
"173611.111111" = #1198
"199298.469388" = #1206
"271267.361111" = #1222
"162591.050989" = #1194
"322830.578512" = #1230
"185790.725327" = #1202
"354308.390023" = #1234
"226757.369615" = #1213
"179546.107440" = #1200
"167965.600645" = #1196
"189035.916824" = #1203
"206611.570248" = #1208
"170753.363841" = #1197
"482253.086420" = #1246
"525099.768956" = #1249
"540657.439446" = #1250
"629881.582263" = #1255
"510204.081633" = #1248
"495933.346558" = #1247
"650364.203954" = #1256
"556916.907997" = #1251
"591715.976331" = #1253
"610351.562500" = #1254
"573921.028466" = #1252
"ShouldForEachValue" = #1344
"[0,0,0,1]" = #1352
"LoopValueType" = #1348
"-1" = #1360
"ghassanpl::ascii::isdigit gives the same results as std::isdigit" = #1362
"returns sane values" = #1337
"ghassanpl::ascii::iscntrl gives the same results as std::iscntrl" = #1383
"ReturnDifferentValuesForGreenAndBlue" = #1339
"LoopIndex" = #1345
"roundtrips correctly" = #1341
"RoundtripCorrectly" = #1343
"ghassanpl::ascii::isalnum gives the same results as std::isalnum" = #1368
"ghassanpl::ascii::ispunct gives the same results as std::ispunct" = #1374
"GiveTheSameResult" = #1358
"ghassanpl::ascii::isalpha gives the same results as std::isalpha" = #1356
"ghassanpl::ascii::isxdigit gives the same results as std::isxdigit" = #1365
"ghassanpl::ascii::isspace gives the same results as std::isspace" = #1371
"[0,0,1,1]" = #1350
"ghassanpl::ascii::islower gives the same results as std::islower" = #1377
"[1,0,0,1]" = #1349
"[0,0,0,0]" = #1353
"struct glm::vec<4,float,0>" = #1347
"[1,1,1,1]" = #1346
"ghassanpl::ascii::isblank gives the same results as std::isblank" = #1386
"ghassanpl::ascii::isupper gives the same results as std::isupper" = #1380
"[0,1,0,1]" = #1351
"ghassanpl::ascii::isgraph gives the same results as std::isgraph" = #1389
"ghassanpl::ascii::isprint gives the same results as std::isprint" = #1392
"ShouldForValuesInRange(-1, 256)" = #1359
RegisterTest(#1, "bytelike_range", `Q:\Code\Native\header_utils\tests\byte_tests.cpp(48, 1):`)
RegisterTest(#3, "ghassanpl::constexpr_math", `Q:\Code\Native\header_utils\tests\cemath_tests.cpp(45, 1):`)
RegisterTest(#5, "ghassanpl::gamma_correct", `Q:\Code\Native\header_utils\tests\colors_test.cpp(16, 1):`)
RegisterTest(#7, "ghassanpl::color_cast", `Q:\Code\Native\header_utils\tests\colors_test.cpp(23, 1):`)
RegisterTest(#9, "ghassanpl::to_hsv", `Q:\Code\Native\header_utils\tests\colors_test.cpp(38, 1):`)
RegisterTest(#11, "ghassanpl::string_ops::ascii", `Q:\Code\Native\header_utils\tests\test_system_tests.cpp(7, 1):`)
StartTestRunner()
StartTest(#13)
StartRequirement(#1, #14, "is true for common type class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >", `Q:\Code\Native\header_utils\tests\byte_tests.cpp(52, 3):`)
StartPredicate(#14, #16, "ShouldBe", "TrueForThisType", `Q:\Code\Native\header_utils\tests\byte_tests.cpp(54, 4):`)
StartPredicate(#14, #19, "ShouldBe", "TrueForConstVersionOfThisType", `Q:\Code\Native\header_utils\tests\byte_tests.cpp(56, 4):`)
EndPredicate(#19, 1)
EndPredicate(#16, 1)
EndRequirement(#14)
StartRequirement(#1, #21, "is true for common type class std::basic_string_view<char,struct std::char_traits<char> >", `Q:\Code\Native\header_utils\tests\byte_tests.cpp(52, 3):`)
StartPredicate(#21, #23, "ShouldBe", "TrueForThisType", `Q:\Code\Native\header_utils\tests\byte_tests.cpp(54, 4):`)
StartPredicate(#21, #24, "ShouldBe", "TrueForConstVersionOfThisType", `Q:\Code\Native\header_utils\tests\byte_tests.cpp(56, 4):`)
EndPredicate(#24, 1)
EndPredicate(#23, 1)
EndRequirement(#21)
StartRequirement(#1, #25, "is true for common type class std::span<unsigned char,-1>", `Q:\Code\Native\header_utils\tests\byte_tests.cpp(52, 3):`)
StartPredicate(#25, #27, "ShouldBe", "TrueForThisType", `Q:\Code\Native\header_utils\tests\byte_tests.cpp(54, 4):`)
StartPredicate(#25, #28, "ShouldBe", "TrueForConstVersionOfThisType", `Q:\Code\Native\header_utils\tests\byte_tests.cpp(56, 4):`)
EndPredicate(#28, 1)
EndPredicate(#27, 1)
EndRequirement(#25)
StartRequirement(#1, #29, "is true for common type class std::span<unsigned char const ,-1>", `Q:\Code\Native\header_utils\tests\byte_tests.cpp(52, 3):`)
StartPredicate(#29, #31, "ShouldBe", "TrueForThisType", `Q:\Code\Native\header_utils\tests\byte_tests.cpp(54, 4):`)
StartPredicate(#29, #32, "ShouldBe", "TrueForConstVersionOfThisType", `Q:\Code\Native\header_utils\tests\byte_tests.cpp(56, 4):`)
EndPredicate(#32, 1)
EndPredicate(#31, 1)
EndRequirement(#29)
StartRequirement(#1, #33, "is false for pointer types", `Q:\Code\Native\header_utils\tests\byte_tests.cpp(61, 2):`)
StartPredicate(#33, #35, "ShouldBe", "FalseForConstChar", `Q:\Code\Native\header_utils\tests\byte_tests.cpp(63, 3):`)
EndPredicate(#35, 1)
EndRequirement(#33)
EndTest(#13)
StartTest(#37)
StartRequirement(#3, #38, "'s functions return the same value in constexpr as in non-constexpr", `Q:\Code\Native\header_utils\tests\cemath_tests.cpp(47, 2):`)
StartPredicate(#38, #40, "ShouldForValuesInRange(0, 505)", "ReturnTheSameValueFor_abs", `Q:\Code\Native\header_utils\tests\cemath_tests.cpp(56, 3):`)
StartPredicate(#38, #1054, "ShouldForValuesInRange(0, 505)", "ReturnTheSameValueFor_floor", `Q:\Code\Native\header_utils\tests\cemath_tests.cpp(57, 3):`)
StartPredicate(#38, #1056, "ShouldForValuesInRange(0, 505)", "ReturnTheSameValueFor_ceil", `Q:\Code\Native\header_utils\tests\cemath_tests.cpp(58, 3):`)
StartPredicate(#38, #1058, "ShouldForValuesInRange(0, 505)", "ReturnTheSameValueFor_trunc", `Q:\Code\Native\header_utils\tests\cemath_tests.cpp(59, 3):`)
StartPredicate(#38, #1060, "ShouldForValuesInRange(0, 505)", "ReturnTheSameValueFor_signbit", `Q:\Code\Native\header_utils\tests\cemath_tests.cpp(60, 3):`)
StartPredicate(#38, #1062, "ShouldForValuesInRange(0, 505)", "ReturnTheSameValueFor_sqrt", `Q:\Code\Native\header_utils\tests\cemath_tests.cpp(61, 3):`)
StartPredicate(#38, #1064, "ShouldForValuesInRange(0, 505)", "ReturnTheSameValueFor_fmod", `Q:\Code\Native\header_utils\tests\cemath_tests.cpp(73, 3):`)
StartPredicate(#38, #1318, "ShouldForValuesInRange(0, 505)", "ReturnTheSameValueFor_pow", `Q:\Code\Native\header_utils\tests\cemath_tests.cpp(87, 3):`)
EndPredicate(#1318, 505)
EndPredicate(#1064, 505)
EndPredicate(#1062, 505)
EndPredicate(#1060, 505)
EndPredicate(#1058, 505)
EndPredicate(#1056, 505)
EndPredicate(#1054, 505)
EndPredicate(#40, 505)
EndRequirement(#38)
EndTest(#37)
StartTest(#1320)
EndTest(#1320)
StartTest(#1321)
StartRequirement(#7, #1322, "converts colors between linear and u32 appropriately", `Q:\Code\Native\header_utils\tests\colors_test.cpp(28, 2):`)
StartPredicate(#1322, #1324, "Should", "ConvertBlack", `Q:\Code\Native\header_utils\tests\colors_test.cpp(30, 3):`)
StartPredicate(#1322, #1327, "Should", "ConvertRed", `Q:\Code\Native\header_utils\tests\colors_test.cpp(31, 3):`)
StartPredicate(#1322, #1329, "Should", "ConvertGreen", `Q:\Code\Native\header_utils\tests\colors_test.cpp(32, 3):`)
StartPredicate(#1322, #1331, "Should", "ConvertBlue", `Q:\Code\Native\header_utils\tests\colors_test.cpp(33, 3):`)
StartPredicate(#1322, #1333, "Should", "ConvertTransparent", `Q:\Code\Native\header_utils\tests\colors_test.cpp(34, 3):`)
EndPredicate(#1333, 1)
EndPredicate(#1331, 1)
EndPredicate(#1329, 1)
EndPredicate(#1327, 1)
EndPredicate(#1324, 1)
EndRequirement(#1322)
EndTest(#1321)
StartTest(#1335)
StartRequirement(#9, #1336, "returns sane values", `Q:\Code\Native\header_utils\tests\colors_test.cpp(42, 2):`)
StartPredicate(#1336, #1338, "Should", "ReturnDifferentValuesForGreenAndBlue", `Q:\Code\Native\header_utils\tests\colors_test.cpp(44, 3):`)
EndPredicate(#1338, 1)
EndRequirement(#1336)
StartRequirement(#9, #1340, "roundtrips correctly", `Q:\Code\Native\header_utils\tests\colors_test.cpp(47, 2):`)
StartPredicate(#1340, #1342, "ShouldForEachValue", "RoundtripCorrectly", `Q:\Code\Native\header_utils\tests\colors_test.cpp(49, 3):`)
EndPredicate(#1342, 6)
EndRequirement(#1340)
EndTest(#1335)
StartTest(#1354)
StartRequirement(#11, #1355, "ghassanpl::ascii::isalpha gives the same results as std::isalpha", `Q:\Code\Native\header_utils\tests\test_system_tests.cpp(35, 3):`)
StartPredicate(#1355, #1357, "ShouldForValuesInRange(-1, 256)", "GiveTheSameResult", `Q:\Code\Native\header_utils\tests\test_system_tests.cpp(37, 4):`)
EndPredicate(#1357, 257)
EndRequirement(#1355)
StartRequirement(#11, #1361, "ghassanpl::ascii::isdigit gives the same results as std::isdigit", `Q:\Code\Native\header_utils\tests\test_system_tests.cpp(35, 3):`)
StartPredicate(#1361, #1363, "ShouldForValuesInRange(-1, 256)", "GiveTheSameResult", `Q:\Code\Native\header_utils\tests\test_system_tests.cpp(37, 4):`)
EndPredicate(#1363, 257)
EndRequirement(#1361)
StartRequirement(#11, #1364, "ghassanpl::ascii::isxdigit gives the same results as std::isxdigit", `Q:\Code\Native\header_utils\tests\test_system_tests.cpp(35, 3):`)
StartPredicate(#1364, #1366, "ShouldForValuesInRange(-1, 256)", "GiveTheSameResult", `Q:\Code\Native\header_utils\tests\test_system_tests.cpp(37, 4):`)
EndPredicate(#1366, 257)
EndRequirement(#1364)
StartRequirement(#11, #1367, "ghassanpl::ascii::isalnum gives the same results as std::isalnum", `Q:\Code\Native\header_utils\tests\test_system_tests.cpp(35, 3):`)
StartPredicate(#1367, #1369, "ShouldForValuesInRange(-1, 256)", "GiveTheSameResult", `Q:\Code\Native\header_utils\tests\test_system_tests.cpp(37, 4):`)
EndPredicate(#1369, 257)
EndRequirement(#1367)
StartRequirement(#11, #1370, "ghassanpl::ascii::isspace gives the same results as std::isspace", `Q:\Code\Native\header_utils\tests\test_system_tests.cpp(35, 3):`)
StartPredicate(#1370, #1372, "ShouldForValuesInRange(-1, 256)", "GiveTheSameResult", `Q:\Code\Native\header_utils\tests\test_system_tests.cpp(37, 4):`)
EndPredicate(#1372, 257)
EndRequirement(#1370)
StartRequirement(#11, #1373, "ghassanpl::ascii::ispunct gives the same results as std::ispunct", `Q:\Code\Native\header_utils\tests\test_system_tests.cpp(35, 3):`)
StartPredicate(#1373, #1375, "ShouldForValuesInRange(-1, 256)", "GiveTheSameResult", `Q:\Code\Native\header_utils\tests\test_system_tests.cpp(37, 4):`)
EndPredicate(#1375, 257)
EndRequirement(#1373)
StartRequirement(#11, #1376, "ghassanpl::ascii::islower gives the same results as std::islower", `Q:\Code\Native\header_utils\tests\test_system_tests.cpp(35, 3):`)
StartPredicate(#1376, #1378, "ShouldForValuesInRange(-1, 256)", "GiveTheSameResult", `Q:\Code\Native\header_utils\tests\test_system_tests.cpp(37, 4):`)
EndPredicate(#1378, 257)
EndRequirement(#1376)
StartRequirement(#11, #1379, "ghassanpl::ascii::isupper gives the same results as std::isupper", `Q:\Code\Native\header_utils\tests\test_system_tests.cpp(35, 3):`)
StartPredicate(#1379, #1381, "ShouldForValuesInRange(-1, 256)", "GiveTheSameResult", `Q:\Code\Native\header_utils\tests\test_system_tests.cpp(37, 4):`)
EndPredicate(#1381, 257)
EndRequirement(#1379)
StartRequirement(#11, #1382, "ghassanpl::ascii::iscntrl gives the same results as std::iscntrl", `Q:\Code\Native\header_utils\tests\test_system_tests.cpp(35, 3):`)
StartPredicate(#1382, #1384, "ShouldForValuesInRange(-1, 256)", "GiveTheSameResult", `Q:\Code\Native\header_utils\tests\test_system_tests.cpp(37, 4):`)
EndPredicate(#1384, 257)
EndRequirement(#1382)
StartRequirement(#11, #1385, "ghassanpl::ascii::isblank gives the same results as std::isblank", `Q:\Code\Native\header_utils\tests\test_system_tests.cpp(35, 3):`)
StartPredicate(#1385, #1387, "ShouldForValuesInRange(-1, 256)", "GiveTheSameResult", `Q:\Code\Native\header_utils\tests\test_system_tests.cpp(37, 4):`)
EndPredicate(#1387, 257)
EndRequirement(#1385)
StartRequirement(#11, #1388, "ghassanpl::ascii::isgraph gives the same results as std::isgraph", `Q:\Code\Native\header_utils\tests\test_system_tests.cpp(35, 3):`)
StartPredicate(#1388, #1390, "ShouldForValuesInRange(-1, 256)", "GiveTheSameResult", `Q:\Code\Native\header_utils\tests\test_system_tests.cpp(37, 4):`)
EndPredicate(#1390, 257)
EndRequirement(#1388)
StartRequirement(#11, #1391, "ghassanpl::ascii::isprint gives the same results as std::isprint", `Q:\Code\Native\header_utils\tests\test_system_tests.cpp(35, 3):`)
StartPredicate(#1391, #1393, "ShouldForValuesInRange(-1, 256)", "GiveTheSameResult", `Q:\Code\Native\header_utils\tests\test_system_tests.cpp(37, 4):`)
EndPredicate(#1393, 257)
EndRequirement(#1391)
EndTest(#1354)
EndTestRunner(false)
